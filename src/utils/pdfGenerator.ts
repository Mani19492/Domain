import jsPDF from 'jspdf';
import { ReconData } from '../types/recon';

export const generatePDF = (data: ReconData) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;
  
  // Helper function to add text with line breaks
  const addText = (text: string, fontSize = 10, style: 'normal' | 'bold' = 'normal') => {
    pdf.setFontSize(fontSize);
    if (style === 'bold') {
      pdf.setFont('helvetica', 'bold');
    } else {
      pdf.setFont('helvetica', 'normal');
    }
    
    const lines = pdf.splitTextToSize(text, pageWidth - 40);
    
    // Check if we need a new page
    if (yPosition + (lines.length * fontSize * 0.35) > pageHeight - 20) {
      pdf.addPage();
      yPosition = 20;
    }
    
    pdf.text(lines, 20, yPosition);
    yPosition += lines.length * fontSize * 0.35 + 5;
  };

  const addSection = (title: string, content: { [key: string]: string }) => {
    addText(title, 14, 'bold');
    yPosition += 5;
    
    Object.entries(content).forEach(([key, value]) => {
      addText(`${key}: ${value || 'N/A'}`, 10);
    });
    
    yPosition += 10;
  };

  // Title
  addText(`Domain Reconnaissance Report: ${data.domain}`, 16, 'bold');
  addText(`Generated: ${new Date().toLocaleString()}`, 10);
  yPosition += 10;

  // Authenticity Check
  addText('AUTHENTICITY STATUS', 14, 'bold');
  addText(`Status: ${data.isGenuine ? 'GENUINE' : 'POTENTIAL THREAT'}`, 12, 'bold');
  addText(`VirusTotal: ${data.authenticity.vtResult.malicious} malicious, ${data.authenticity.vtResult.suspicious} suspicious`);
  if (data.authenticity.gsResult) {
    addText(`Google Safe Browsing: ${data.authenticity.gsResult.threatType}`);
  }
  yPosition += 10;

  // WHOIS Information
  addSection('WHOIS INFORMATION', {
    'Registrar': data.whois.registrar,
    'Registrant': data.whois.registrant,
    'Created': data.whois.created,
    'Expires': data.whois.expires,
    'Name Servers': data.whois.nameServers,
    'Status': data.whois.status
  });

  // DNS Records
  addText('DNS RECORDS', 14, 'bold');
  data.dns.forEach(record => {
    addText(`${record.type}: ${record.value}`);
  });
  yPosition += 10;

  // SSL Information
  addSection('SSL CERTIFICATE', {
    'Issuer': data.ssl.issuer,
    'Subject': data.ssl.subject,
    'Expiry': data.ssl.expiry,
    'Valid': data.ssl.valid ? 'Yes' : 'No'
  });

  // Threat Intelligence
  addSection('THREAT INTELLIGENCE', {
    'Reputation': data.threats.reputation.toString(),
    'Last Analysis': data.threats.lastAnalysis,
    'Malicious Detections': data.threats.malicious.toString(),
    'Suspicious Detections': data.threats.suspicious.toString(),
    'Categories': data.threats.categories.join(', ')
  });

  // Geolocation
  addSection('GEOLOCATION', {
    'Country': data.geolocation.country,
    'City': data.geolocation.city,
    'ISP': data.geolocation.isp,
    'Coordinates': `${data.geolocation.latitude}, ${data.geolocation.longitude}`
  });

  // Subdomains
  if (data.subdomains.length > 0) {
    addText('SUBDOMAINS', 14, 'bold');
    data.subdomains.slice(0, 20).forEach(subdomain => {
      addText(`• ${subdomain}`);
    });
    if (data.subdomains.length > 20) {
      addText(`... and ${data.subdomains.length - 20} more`);
    }
    yPosition += 10;
  }

  // Open Ports
  if (data.openPorts.length > 0) {
    addText('OPEN PORTS', 14, 'bold');
    addText(data.openPorts.join(', '));
    yPosition += 10;
  }

  // Technologies
  if (data.technologies.length > 0) {
    addText('TECHNOLOGIES', 14, 'bold');
    data.technologies.forEach(tech => {
      addText(`• ${tech}`);
    });
    yPosition += 10;
  }

  // Security Headers
  addText('SECURITY HEADERS', 14, 'bold');
  Object.entries(data.securityHeaders).forEach(([header, value]) => {
    addText(`${header}: ${value}`);
  });

  // Footer
  if (yPosition < pageHeight - 40) {
    yPosition = pageHeight - 30;
  } else {
    pdf.addPage();
    yPosition = pageHeight - 30;
  }
  
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Generated by Domain Reconnaissance Tool', 20, yPosition);

  // Save the PDF
  pdf.save(`${data.domain}_reconnaissance_report.pdf`);
};